/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package it.unical.demacs.pierluigi.finted_android.apis

import it.unical.demacs.pierluigi.finted_android.models.OfferDto
import it.unical.demacs.pierluigi.finted_android.models.OfferPublishDto
import it.unical.demacs.pierluigi.finted_android.models.ServiceError

import it.unical.demacs.pierluigi.finted_android.infrastructure.*

class OfferControllerApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param id  
     * @return void
     */
    fun delete3(id: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/orders/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param postId  
     * @return kotlin.Array<OfferDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getPostOffers(postId: kotlin.Long): kotlin.Array<OfferDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/orders/post/{post-id}".replace("{" + "post-id" + "}", "$postId")
        )
        val response = request<kotlin.Array<OfferDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OfferDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param userId  
     * @return kotlin.Array<OfferDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserOffers(userId: kotlin.Long): kotlin.Array<OfferDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/orders/user/{user-id}".replace("{" + "user-id" + "}", "$userId")
        )
        val response = request<kotlin.Array<OfferDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<OfferDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return OfferDto
     */
    @Suppress("UNCHECKED_CAST")
    fun save3(body: OfferPublishDto): OfferDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/orders/"
        )
        val response = request<OfferDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OfferDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
